#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "../random.glsl"
#include "../brdf.glsl"
#include "gi_commons.glsl"

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(set = 2, binding = 0) uniform Camera
{
    mat4 view;
    mat4 projection;
	vec3 viewDir;
	vec3 camPos;
	uint frameNumber;
} cameraBuffer;


layout(set = 4, binding = 0, rgba16f) uniform image2D radianceImage;
layout(set = 4, binding = 1, rgba16f) uniform image2D directionDepth;

layout(set = 5, binding = 0) uniform DdgiParametersLayout{
	DdgiParameters parameters;
}ddgi;

layout(push_constant) uniform pushConstantLayout
{
	mat4 randomOrientation;
	int isFirstFrame;
}pushConstant;


struct Hit{
	vec3 color;
	vec3 incommingLight;
	uint payloadSeed;
	float rayDistance;
	vec3 rOrigin;
	vec3 rDirection;
};
layout (location = 0) rayPayloadEXT Hit hitValue;

vec3 spherical_fibonacci(float i, float n)
{
    const float PHI = sqrt(5.0) * 0.5 + 0.5;
#define madfrac(A, B) ((A) * (B)-floor((A) * (B)))
    float phi       = 2.0 * PI * madfrac(i, PHI - 1);
    float cos_theta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sin_theta = sqrt(clamp(1.0 - cos_theta * cos_theta, 0.0f, 1.0f));

    return vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);

#undef madfrac
}

void main()
{
	uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, cameraBuffer.frameNumber);
	hitValue.payloadSeed = seed;

	const ivec2 pixCoord = ivec2(gl_LaunchIDEXT.xy);
	int probeId = pixCoord.y;
	int rayId = pixCoord.x;

	vec3 origin = probe_location(ddgi.parameters, probeId);
	vec3 direction = normalize(mat3(pushConstant.randomOrientation) * spherical_fibonacci(float(rayId), float(256))) ;

	float tmin = 0.001;
	float tmax = 10000.0;

	hitValue.color = vec3(1.0);
	hitValue.incommingLight = vec3(0.0);

	hitValue.rayDistance = tmax;

	hitValue.rOrigin = origin;
	hitValue.rDirection = direction;
	
	//for(int i=1;i<=2;i++) //2 bounce
	{
		traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0,0,0, hitValue.rOrigin, tmin, hitValue.rDirection, tmax, 0);
	}
	
	imageStore(radianceImage, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue.incommingLight, 0.f));
	imageStore(directionDepth, ivec2(gl_LaunchIDEXT.xy), vec4(direction, hitValue.rayDistance));
}